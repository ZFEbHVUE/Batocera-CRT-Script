#!/bin/bash

BOOTCONF="/boot/batocera-boot.conf"
REBOOT_FLAG=/var/run/emulationstation-standalone
log="/userdata/system/logs/display.log"

if [ "$1" = "--stop-rebooting" ]; then
    rm -f "${REBOOT_FLAG}"
    exit 0
fi

# Flag to reboot at each stop
# ES is stopped : in case of crash, in case of some options are changed (language, video mode)
touch "${REBOOT_FLAG}" || exit 1

# Environment
export HOME=/userdata/system

batocera-switch-screen-checker --init

GAMELAUNCH=1
while [ -e "${REBOOT_FLAG}" ]; do
    ### LANGUAGE SETTINGS ###
    settings_lang="$(batocera-settings-get system.language)"
    [ -z "${settings_lang}" ] && settings_lang=en_US
    export LC_ALL="${settings_lang}.UTF-8"
    export LANG=${LC_ALL}
    echo "Language set to ${LC_ALL}" >> $log
    ###################

    ### VIDEO OUTPUT ###
    # Because of xinerama breaking es, enable only one screen at a time
    # /var/run/switch_screen_request is a file to request screen switch
    if [ -e "/var/run/switch_screen_request" ]; then
        echo "Switch screen request" >> $log
        settings_output=$(cat "/var/run/switch_screen_request")
        settings_output2=
        settings_output3=

        # Try to fill the screen 2
        # Fill the screen2 with videooutput if <> from switch_screen_request, else videooutput2 if <> from switch_screen_request
        if [ "${settings_output}" != "" ]; then
            stmp="$(batocera-settings-get global.videooutput)"
            if [ "${settings_output}" != "${stmp}" ]; then
                settings_output2="${stmp}"
            else
                stmp="$(batocera-settings-get global.videooutput2)"
                if [ "${settings_output}" != "${stmp}" ]; then
                    settings_output2="${stmp}"
                fi
            fi
        fi

        rm "/var/run/switch_screen_request"
    else
        settings_output="$(batocera-settings-get global.videooutput)"
        settings_output2="$(batocera-settings-get global.videooutput2)"
        settings_output3="$(batocera-settings-get global.videooutput3)"
        echo "Default video outputs: ${settings_output}, ${settings_output2}, ${settings_output3}" >> $log
    fi

    # VALIDATE OUTPUTS
    #   The output must exists in listOutputs
    #   Output n-1 must be defined
    #   Output must be different from n-x outputs

    # Validate output 1
    if [ -n "${settings_output}" ]; then
        if ! batocera-resolution listOutputs | grep -qE '^'"${settings_output}"'$'; then
            echo "Invalid output: ${settings_output}" >> $log
            settings_output=
        fi
    fi
    # Validate output 2
    if [ -n "${settings_output2}" ]; then
        if [ -z "${settings_output}" -o "${settings_output}" = "${settings_output2}" ]; then
            settings_output2=
        else
            if ! batocera-resolution listOutputs | grep -qE '^'"${settings_output2}"'$'; then
                echo "Invalid output: ${settings_output2}" >> $log
                settings_output2=
            fi
        fi
    fi
    # Validate output 3
    if [ -n "${settings_output3}" ]; then
        if [ -z "${settings_output}" -o -z "${settings_output2}" -o "${settings_output}" = "${settings_output3}" -o "${settings_output2}" = "${settings_output3}" ]; then
            settings_output3=
        else
            if ! batocera-resolution listOutputs | grep -qE '^'"${settings_output3}"'$'; then
                echo "Invalid output: ${settings_output3}" >> $log
                settings_output3=
            fi
        fi
    fi

    # If screen1 is empty, take the first one found
    if [ -z "${settings_output}" ]; then
        settings_output=$(batocera-resolution currentOutput)
        echo "First video output defaulted to: ${settings_output}" >> $log
        # currentOutput may be unplugged after an event of type unplugging it (/var/run/switch_screen_request)
        if ! batocera-resolution listOutputs | grep -qE "^${settings_output}$"; then
            settings_output=$(batocera-resolution listOutputs | head -1)
        fi
    fi
    # If screen2 is empty, take the first one found which is not screen1
    if [ -z "${settings_output2}" ]; then
        user_output2="$(batocera-settings-get global.videooutput2)"
        if [ "${user_output2}" != "none" ]; then
            settings_output2=$(batocera-resolution listOutputs | grep -vE "^${settings_output}$" | head -1)
        fi
    fi

    # We set the output to enable screens...
    batocera-resolution setOutput "${settings_output}" "${settings_output2}" "${settings_output3}" # empty or invalid values defaults to the first valid

    echo "Updated video outputs: ${settings_output}, ${settings_output2}, ${settings_output3}" >> $log
    ###################

    ### ROTATION ###
    display_rotate=
    # Try to find a rotation for the custom output
    # Read the final effective output
    effective_output=$(batocera-resolution currentOutput)
    if [ -n "${effective_output}" ]; then
        display_rotate=$(/usr/bin/batocera-settings-get-master "display.rotate.${effective_output}")
        echo "Rotation for output ${effective_output}: ${display_rotate}" >> $log
    fi

    if [ -z "${display_rotate}" ]; then
        display_rotate="$(/usr/bin/batocera-settings-get-master display.rotate)"
    fi

    if [ -n "${effective_output}" ] && [ -n "${display_rotate}" ]; then
        if batocera-resolution supportSystemRotation; then
            batocera-resolution setRotation "${display_rotate}"
            echo "System rotation set to ${display_rotate}" >> $log
        else
            # When no rotation is available by the system, apply it
            EXTRA_OPTS="--screenrotate ${display_rotate}"
        fi
    fi
    ###################

    ### REFLECTION ###
    if batocera-resolution supportSystemReflection; then
        display_reflection="$(/usr/bin/batocera-settings-get-master display.reflection)"
        if [ -n "${display_reflection}" ]; then
            batocera-resolution setReflection "${display_reflection}"
        fi
    fi
    ###################
    
    ### RESOLUTION ###
    ## The resolution for the first screen is on the boot file so that it is easier to change it
    ## It is not needed for other screens

        bootresolution="$(batocera-settings-get-master -f "$BOOTCONF" es.resolution)"

    after_last_dot=$(echo "$bootresolution" | sed 's/.*\.//')
    digit_count=$(echo "$after_last_dot" | grep -o '[0-9]' | wc -l)
    if [ "$digit_count" -ge 5 ]; then
    	bootresolution=$(echo "$bootresolution" | sed 's/.\{3\}$//')
    fi

    if [ -z "${bootresolution}" ]; then
        batocera-resolution minTomaxResolution-secure
    else
###################Â ZFEbHVUE ##########################################################################	
            line=$(grep '^\(#\)\?es\.customsargs=' /userdata/system/batocera.conf)
	    screenoffset_values=$(echo "$line" | awk '{match($0, /--screenoffset ([0-9]+) ([0-9]+)/, arr); print arr[1], arr[2]}')
	    read screenoffset_x screenoffset_y <<< "$screenoffset_values"    
	    display_rotate="$(/usr/bin/batocera-settings-get-master display.rotate)"
	    read WIDTH HEIGHT PARTHZ <<< $(echo ${bootresolution} | awk -F'[x.]' '{print $1, $2, $3 "." $4}')
	    
        if [ $(( WIDTH % 10 % 2 )) -eq 0 ]; then
	    	WIDTH=$(( WIDTH + 1 ))
	    fi

 	    RES="${WIDTH}x${HEIGHT}"
	    bootresolution="${RES}.${PARTHZ}"

	    file="/userdata/system/es.arg.override"
	    if [ -f "$file" ]; then
    		#screensize_x=$(grep -w screensize_x "$file" | awk '{print $2}')
    		#screensize_y=$(grep -w screensize_y "$file" | awk '{print $2}')
		screensizeoffset_x=$(grep -w screensizeoffset_x "$file" | awk '{print $2}')
    		screensizeoffset_y=$(grep -w screensizeoffset_y "$file" | awk '{print $2}')
		screensize_x=$((WIDTH  + screensizeoffset_x))
		screensize_y=$((HEIGHT + screensizeoffset_y))
    		screenoffset_x=$(grep -w screenoffset_x "$file" | awk '{print $2}')
    		screenoffset_y=$(grep -w screenoffset_y "$file" | awk '{print $2}')
	    else
		screensize_x=$WIDTH
		screensize_y=$HEIGHT
	    fi

	    sed -i "s/--mode \".*\"/--mode \"$RES\"/"    /userdata/system/scripts/first_script.sh

	    if ([ "$display_rotate" == "1" ] || [ "$display_rotate" == "3" ]); then
		es_arg="es.customsargs=--screensize "$screensize_y" "$screensize_x" --screenoffset "$screenoffset_y" "$screenoffset_x""
	    else
		es_arg="es.customsargs=--screensize "$screensize_x" "$screensize_y" --screenoffset "$screenoffset_x" "$screenoffset_y""
	    fi

	    sed -i "s/.*es.customsargs=.*/$es_arg/" 		/userdata/system/batocera.conf

	    batocera-resolution --screen "${settings_output}"  defineMode "${bootresolution}"
	    batocera-resolution --screen "${settings_output}"  setMode_CVT "${bootresolution}"

    fi

    # Other screens
    if [ -n "${settings_output2}" ]; then
        display_rotate2=$(/usr/bin/batocera-settings-get-master "display.rotate2.${settings_output2}")
        if [ -z "${display_rotate2}" ]; then
            display_rotate2="$(/usr/bin/batocera-settings-get display.rotate2)"
        fi
        if batocera-resolution supportSystemRotation; then
            batocera-resolution --screen "${settings_output2}" setRotation "${display_rotate2}"
        fi
        bootresolution2="$(batocera-settings-get es.resolution2)"
        if [ -z "${bootresolution2}" ]; then
            batocera-resolution --screen "${settings_output2}" minTomaxResolution-secure
        else
         # batocera-resolution --screen "${settings_output2}" defineMode "${bootresolution2}"
           batocera-resolution --screen "${settings_output2}" setMode_CVT "${bootresolution2}"
        fi
    fi
    if [ -n "${settings_output3}" ]; then
        display_rotate3=$(/usr/bin/batocera-settings-get-master "display.rotate3.${settings_output3}")
        if [ -z "${display_rotate3}" ]; then
            display_rotate3="$(/usr/bin/batocera-settings-get display.rotate3)"
        fi
        if batocera-resolution supportSystemRotation; then
            batocera-resolution --screen "${settings_output3}" setRotation "${display_rotate3}"
        fi
        bootresolution3="$(batocera-settings-get es.resolution3)"
        if [ -z "${bootresolution3}" ]; then
            batocera-resolution --screen "${settings_output3}" minTomaxResolution-secure
        else
            batocera-resolution --screen "${settings_output3}" setMode "${bootresolution3}"
        fi
    fi

    # Now that all screens are enabled, rotated, resized... we reenable cause it may change the position in case of multi screens
    if [ -n "${settings_output2}" -o -n "${settings_output3}" ]; then
        batocera-resolution setOutput "${settings_output}" "${settings_output2}" "${settings_output3}" # empty or invalid values defaults to the first valid
    fi
    ###################

    ### KEYBOARD ###
    # TODO: xorg/wayland
    ###################

    # TODO: Remove specific commands from emulationstation-standalone.
    if which xrandr; then # if xrandr available
        ### DPI override for nvidia gpus ###
        settings_output="$(batocera-settings-get global.dpi)"
        [ ! -z "${settings_output}" ] && batocera-resolution setDPI "${settings_output}"
        ###################

        ### Keyboard (specific to xorg) ###
        map_name="$(batocera-settings-get system.kblayout)"
        variant_type="$(batocera-settings-get system.kbvariant)"
        if [ -n "${map_name}" ]; then
            if [ -n "${variant_type}" ]; then
                setxkbmap "${map_name}" -variant "${variant_type}"
            else
                setxkbmap "${map_name}"
            fi
        else
            map_name=$(echo $settings_lang | cut -c 1-2)
            if [ map_name="en" ]; then
                map_name=$(echo $settings_lang | cut -c 4- | tr '[:upper:]' '[:lower:]')
            fi
            setxkbmap "${map_name}"
        fi
        ###################
                
        forcedresolution="$(/usr/bin/batocera-settings-get -f $BOOTCONF es.forcedresolution)"
        if [ -n "${forcedresolution}" ]; then
            batocera-resolution forceMode "${forcedresolution}"
        fi

        # Multitouch for touch screens
        TOUCHSCREEN=$(xinput | grep pointer | tail -n +2 | grep -Ei 'touchscreen|2808:1015' | sed -E 's/[^a-zA-Z0-9]*((\S+ ?)+[a-zA-Z0-9\(\)]+)\s*id=([0-9]+)\s*(.*)/"\1"/')
        if ! [ -z "${TOUCHSCREEN}" ]; then
            killall -9 touchegg
            touchegg --daemon &
            touchegg --client &
        fi

        [ -e /userdata/system/custom-es-config ] && bash /userdata/system/custom-es-config &
        ###################
    fi
    CUSTOMESOPTIONS="$(/usr/bin/batocera-settings-get es.customsargs)"

    # Launch automatically a game only the first time
    if [ ${GAMELAUNCH} = 1 ]; then
        GAMELAUNCHOPT=
    else
        GAMELAUNCHOPT="--no-startup-game"
    fi

    # Save the current output in which es is started (used to switch screen, when unplugged)
    batocera-resolution currentOutput > "/var/run/switch_screen_current"

    # DBUS launch is required for the gio/gvfs/trash:///...
    eval "$(dbus-launch --sh-syntax --exit-with-session)"

    if which batocera-backglass; then
        if [ -n "${settings_output2}" ]; then
            BGOFFSETX=$(batocera-resolution currentResolution | cut -d x -f 1)
            BGSIZE=$(batocera-resolution --screen "${settings_output2}" currentResolution | tr "x" " ")
            THEME="$(batocera-settings-get backglass.theme)"
            batocera-backglass enable ${BGOFFSETX} 0 ${BGSIZE} "${THEME}"
        fi
    fi

    cd /userdata # ES need a PWD
     emulationstation ${GAMELAUNCHOPT} --exit-on-reboot-required --windowed ${CUSTOMESOPTIONS}

    if which batocera-backglass; then
        if [ -n "${settings_output2}" ]; then
            batocera-backglass disable
        fi
    fi

    # ES flag when rebooting (https://github.com/batocera-linux/batocera-emulationstation/blob/master/es-core/src/platform.cpp#L194)
    if [ -e "/tmp/shutdown.please" ] || [ -e "/tmp/reboot.please" ]; then
        echo "System shutdown/reboot requested. Exiting launcher script." >> $log
        rm -f "${REBOOT_FLAG}"
        break
    elif [ -e "/tmp/restart.please" ]; then
        echo "ES restart requested. Looping to relaunch." >> $log
    elif [ -e "/tmp/suspend.please" ]; then
        echo "ES exited for fake suspend. Waiting for resume signal on FIFO pipe..." >> $log
        rm -f "/tmp/suspend.please"
        # The 'read' command will block the script until 'resume' is called.
        read < "/tmp/es-resume.fifo"
        echo "Resume signal received. Relaunching ES." >> $log
    fi
    GAMELAUNCH=0
done

# Cleanup when the script finally exits (only after a shutdown/reboot)
rm -f "/tmp/es-resume.fifo"
rm -f "/tmp/suspend.please"
exit 0
